#include<stdio.h>
#include<stdlib.h>

int main(int vv)
{
	int fly = 0;
	unsigned char data[7382];
	unsigned long long int data1[7382];
	FILE *fp = fopen("decode complete.txt","wb");
	int pwd1;
	int pwd2;
	printf("pwd1:");
	scanf("%d",&pwd1);
	printf("pwd2:");
	scanf("%d",&pwd2);
	data1[0] =  (   15493000   - pwd1 ) / pwd2; 
data1[1] =  (   9783625   - pwd1 ) / pwd2; 
data1[2] =  (   8930500   - pwd1 ) / pwd2; 
data1[3] =  (   15427375   - pwd1 ) / pwd2; 
data1[4] =  (   8733625   - pwd1 ) / pwd2; 
data1[5] =  (   9783625   - pwd1 ) / pwd2; 
data1[6] =  (   15558625   - pwd1 ) / pwd2; 
data1[7] =  (   9783625   - pwd1 ) / pwd2; 
data1[8] =  (   9980500   - pwd1 ) / pwd2; 
data1[9] =  (   15493000   - pwd1 ) / pwd2; 
data1[10] =  (   8668000   - pwd1 ) / pwd2; 
data1[11] =  (   12080500   - pwd1 ) / pwd2; 
data1[12] =  (   15493000   - pwd1 ) / pwd2; 
data1[13] =  (   10111750   - pwd1 ) / pwd2; 
data1[14] =  (   9718000   - pwd1 ) / pwd2; 
data1[15] =  (   2105500   - pwd1 ) / pwd2; 
data1[16] =  (   15558625   - pwd1 ) / pwd2; 
data1[17] =  (   10046125   - pwd1 ) / pwd2; 
data1[18] =  (   9980500   - pwd1 ) / pwd2; 
data1[19] =  (   15493000   - pwd1 ) / pwd2; 
data1[20] =  (   9980500   - pwd1 ) / pwd2; 
data1[21] =  (   8471125   - pwd1 ) / pwd2; 
data1[22] =  (   15558625   - pwd1 ) / pwd2; 
data1[23] =  (   9783625   - pwd1 ) / pwd2; 
data1[24] =  (   11096125   - pwd1 ) / pwd2; 
data1[25] =  (   15427375   - pwd1 ) / pwd2; 
data1[26] =  (   9127375   - pwd1 ) / pwd2; 
data1[27] =  (   8930500   - pwd1 ) / pwd2; 
data1[28] =  (   15427375   - pwd1 ) / pwd2; 
data1[29] =  (   9127375   - pwd1 ) / pwd2; 
data1[30] =  (   10768000   - pwd1 ) / pwd2; 
data1[31] =  (   2105500   - pwd1 ) / pwd2; 
data1[32] =  (   3024250   - pwd1 ) / pwd2; 
data1[33] =  (   15558625   - pwd1 ) / pwd2; 
data1[34] =  (   8733625   - pwd1 ) / pwd2; 
data1[35] =  (   9258625   - pwd1 ) / pwd2; 
data1[36] =  (   15493000   - pwd1 ) / pwd2; 
data1[37] =  (   9061750   - pwd1 ) / pwd2; 
data1[38] =  (   10768000   - pwd1 ) / pwd2; 
data1[39] =  (   15558625   - pwd1 ) / pwd2; 
data1[40] =  (   9061750   - pwd1 ) / pwd2; 
data1[41] =  (   12080500   - pwd1 ) / pwd2; 
data1[42] =  (   15361750   - pwd1 ) / pwd2; 
data1[43] =  (   11555500   - pwd1 ) / pwd2; 
data1[44] =  (   8405500   - pwd1 ) / pwd2; 
data1[45] =  (   2105500   - pwd1 ) / pwd2; 
data1[46] =  (   15493000   - pwd1 ) / pwd2; 
data1[47] =  (   10505500   - pwd1 ) / pwd2; 
data1[48] =  (   9783625   - pwd1 ) / pwd2; 
data1[49] =  (   15493000   - pwd1 ) / pwd2; 
data1[50] =  (   8602375   - pwd1 ) / pwd2; 
data1[51] =  (   8471125   - pwd1 ) / pwd2; 
data1[52] =  (   15493000   - pwd1 ) / pwd2; 
data1[53] =  (   10505500   - pwd1 ) / pwd2; 
data1[54] =  (   8471125   - pwd1 ) / pwd2; 
data1[55] =  (   15493000   - pwd1 ) / pwd2; 
data1[56] =  (   10243000   - pwd1 ) / pwd2; 
data1[57] =  (   12343000   - pwd1 ) / pwd2; 
data1[58] =  (   15427375   - pwd1 ) / pwd2; 
data1[59] =  (   10571125   - pwd1 ) / pwd2; 
data1[60] =  (   10243000   - pwd1 ) / pwd2; 
data1[61] =  (   2105500   - pwd1 ) / pwd2; 
data1[62] =  (   15558625   - pwd1 ) / pwd2; 
data1[63] =  (   9783625   - pwd1 ) / pwd2; 
data1[64] =  (   11818000   - pwd1 ) / pwd2; 
data1[65] =  (   15427375   - pwd1 ) / pwd2; 
data1[66] =  (   9389875   - pwd1 ) / pwd2; 
data1[67] =  (   8733625   - pwd1 ) / pwd2; 
data1[68] =  (   15427375   - pwd1 ) / pwd2; 
data1[69] =  (   9455500   - pwd1 ) / pwd2; 
data1[70] =  (   9980500   - pwd1 ) / pwd2; 
data1[71] =  (   15493000   - pwd1 ) / pwd2; 
data1[72] =  (   9914875   - pwd1 ) / pwd2; 
data1[73] =  (   8930500   - pwd1 ) / pwd2; 
data1[74] =  (   15493000   - pwd1 ) / pwd2; 
data1[75] =  (   9061750   - pwd1 ) / pwd2; 
data1[76] =  (   11883625   - pwd1 ) / pwd2; 
data1[77] =  (   15427375   - pwd1 ) / pwd2; 
data1[78] =  (   9127375   - pwd1 ) / pwd2; 
data1[79] =  (   8930500   - pwd1 ) / pwd2; 
data1[80] =  (   15427375   - pwd1 ) / pwd2; 
data1[81] =  (   9127375   - pwd1 ) / pwd2; 
data1[82] =  (   10768000   - pwd1 ) / pwd2; 


	
	
	
	for(int i = 0; i<83; i++)
	{
		for( int j = 1; j<= 255  ; j++ )
		{
			if( j == data1[i])
			{
				
				data[fly] = j;
				fly++;
				
			}
			
		}
		
	}
	
	fwrite(&data[0],1,fly,fp);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	fclose(fp);
	
	return 0;
	
	
}
